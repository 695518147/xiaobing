<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.OrderMapper" >
  <resultMap id="BaseResultMap" type="entity.Order" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="orderName" property="ordername" jdbcType="VARCHAR" />
    <result column="isShow" property="isshow" jdbcType="BIT" />
    <result column="isSplit" property="issplit" jdbcType="BIT" />
    <result column="number" property="number" jdbcType="INTEGER" />
    <result column="createTime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="orderType_id" property="ordertypeId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="entity.OrderWithBLOBs" extends="BaseResultMap" >
    <result column="orderDescription" property="orderdescription" jdbcType="LONGVARCHAR" />
    <result column="orderTypeDescription" property="ordertypedescription" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, orderName, isShow, isSplit, number, createTime, orderType_id
  </sql>
  <sql id="Blob_Column_List" >
    orderDescription, orderTypeDescription
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from xiaobing_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from xiaobing_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="entity.OrderWithBLOBs" >
    insert into xiaobing_order (id, orderName, isShow, 
      isSplit, number, createTime, 
      orderType_id, orderDescription, orderTypeDescription
      )
    values (#{id,jdbcType=INTEGER}, #{ordername,jdbcType=VARCHAR}, #{isshow,jdbcType=BIT}, 
      #{issplit,jdbcType=BIT}, #{number,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, 
      #{ordertypeId,jdbcType=INTEGER}, #{orderdescription,jdbcType=LONGVARCHAR}, #{ordertypedescription,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="entity.OrderWithBLOBs" >
    insert into xiaobing_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="ordername != null" >
        orderName,
      </if>
      <if test="isshow != null" >
        isShow,
      </if>
      <if test="issplit != null" >
        isSplit,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="createtime != null" >
        createTime,
      </if>
      <if test="ordertypeId != null" >
        orderType_id,
      </if>
      <if test="orderdescription != null" >
        orderDescription,
      </if>
      <if test="ordertypedescription != null" >
        orderTypeDescription,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="ordername != null" >
        #{ordername,jdbcType=VARCHAR},
      </if>
      <if test="isshow != null" >
        #{isshow,jdbcType=BIT},
      </if>
      <if test="issplit != null" >
        #{issplit,jdbcType=BIT},
      </if>
      <if test="number != null" >
        #{number,jdbcType=INTEGER},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="ordertypeId != null" >
        #{ordertypeId,jdbcType=INTEGER},
      </if>
      <if test="orderdescription != null" >
        #{orderdescription,jdbcType=LONGVARCHAR},
      </if>
      <if test="ordertypedescription != null" >
        #{ordertypedescription,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="entity.OrderWithBLOBs" >
    update xiaobing_order
    <set >
      <if test="ordername != null" >
        orderName = #{ordername,jdbcType=VARCHAR},
      </if>
      <if test="isshow != null" >
        isShow = #{isshow,jdbcType=BIT},
      </if>
      <if test="issplit != null" >
        isSplit = #{issplit,jdbcType=BIT},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="createtime != null" >
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="ordertypeId != null" >
        orderType_id = #{ordertypeId,jdbcType=INTEGER},
      </if>
      <if test="orderdescription != null" >
        orderDescription = #{orderdescription,jdbcType=LONGVARCHAR},
      </if>
      <if test="ordertypedescription != null" >
        orderTypeDescription = #{ordertypedescription,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="entity.OrderWithBLOBs" >
    update xiaobing_order
    set orderName = #{ordername,jdbcType=VARCHAR},
      isShow = #{isshow,jdbcType=BIT},
      isSplit = #{issplit,jdbcType=BIT},
      number = #{number,jdbcType=INTEGER},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      orderType_id = #{ordertypeId,jdbcType=INTEGER},
      orderDescription = #{orderdescription,jdbcType=LONGVARCHAR},
      orderTypeDescription = #{ordertypedescription,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="entity.Order" >
    update xiaobing_order
    set orderName = #{ordername,jdbcType=VARCHAR},
      isShow = #{isshow,jdbcType=BIT},
      isSplit = #{issplit,jdbcType=BIT},
      number = #{number,jdbcType=INTEGER},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      orderType_id = #{ordertypeId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>